27 paskaita. Automatinis svetainės testavimas
Terminas: 2025 m. kovo 24 d., 23:59 val.
Instrukcijos
Susikurti naują Node.js projektą, jame susikonfigūruoti Cypress E2E testavimui
Šiam projektui susikurti atskirą GitHub repositoriją "automationexercise_website_full_testing_portfolio"
Atlikti testavimą puslapiui: https://automationexercise.com/ 
Atlikti Test 1, Test 2, Test 3 , Test 4, Test 5 testus. Galite atlikti savo nuožiūra ir daugiau.



Testavimo scenarijai aprašyti https://automationexercise.com/test_cases
Stenkitės atlikti kuo tvarkingiau, nes reikės suprogramuoti visus testavimo scenarijus.
Tai dalis baigiamojo kurso darbo.

// namų darbai. cypress - todo.
// VS Code: cypress/npm + DBeaver.

// https://docs.cypress.io/app/get-started/why-cypress

// API su 10 endpoint
//  GET /products - atvaizduoti visus produktus. 
    // 1. Kreiptis /products GET
    // 2. patikrinti ar yra tinkamas response. Status kodo patikra. 200
    // 3. Reikia response laika
    // 4. Patikrinti ar ne tuscias ir patikrinti ar tai nera error zinute



    describe('CRUD_API', () => {




        context('/products', () => {  
            
            context('/products atskiri testai', () => {
                it('/products status kodas 200', ()=> {
                    cy.request("GET", "localhost:3000/products").then((response) => {
                        expect(response.status).to.be.eq(200);
                    });
                });
                it('/products atsakymo laikas', ()=> {
                    cy.request("GET", "localhost:3000/products").then((response) => {
                        expect(response.duration).to.be.lessThan(1000);
                    });
                });
                it('/products netuscias', ()=> {
                    cy.request("GET", "localhost:3000/products").then((response) => {
                        expect(response.body).length.to.be.greaterThan(1);
                    });
                });          
            });    
            
            it('/products endpoint bendras testas', () => {
        
            cy.request("GET", "localhost:3000/products").then((response) => {
                //patikrinti status koda
                expect(response.status).to.be.eq(200);
                //response
                expect(response.duration).to.be.lessThan(1000);//1sec
                expect(response.duration).to.not.be.greaterThan(1000);
                expect(response.duration).to.be.below(1000);
        
                //patikrinti response.body
                expect(response.body).length.to.be.above(1);
                //Statusas 200 iur gaunam produktus
                //{0,1,2 ...}
                //400 error
                //{
                // error: 'kazkas negerai'
                // }
                
                console.log('test');
                cy.log('test');
                console.log('pakeitimas')
        
                //response.body turi elementa products 
                // error elemento tikrinimas
        
                console.log(response.body);
                cy.log(response.body);
                //visi produktai response.body
        
        
                // expect()
            });
        
        });
        
        
        it('/products vieno produkto bendras testas', () => {
        
            cy.request("GET","localhost:3000/products/2" ).then((response)=>{
                expect(response.status).to.be.eq(200);
                // expect(response.body).length.to.be.above(0); //ilgis daugiau nei 0
                expect(response.body).to.have.property('id', 2); //error - sita vieta nepraeis
                expect(response.body).to.have.property('title', 'Pizza');
        
                // expect(response.body).to.have.property('title');
                
                // expect()
                // id == 2 arba title == "Antra prekė" nebutu tuscias
                cy.log(response.body.id);
                cy.log(response.body.title);
                // expect(response.body).length.to.be.greaterThan(0);
                cy.log(response.body);
            });
        
            cy.log('pasiruosiau testui')
        });
    });
});




// API su 10 endpoint
//  GET /products - atvaizduoti visus produktus. 
    // 1. Kreiptis /products GET
    // 2. patikrinti ar yra tinkamas response. Status kodo patikra. 200
    // 3. Reikia response laika
    // 4. Patikrinti ar ne tuscias ir patikrinti ar tai nera error zinute
// Papildomai: parašyti CYPRESS testą, kuris patikrina, ar produktas buvo sukurtas, kai kreipiamasį į POST /products
it('Tikrina, ar produktas buvo sukurtas, kai kreipiamasį į POST /products', () => {
    cy.request('POST', 'http://localhost:3000/products', {     
        title: "Water", 
        description: "Sparkling with lemon", 
        price: 0.99}).then((response) => {
        expect(response.status).to.be.eq(201);
        expect(response.body).to.have.property('message')
        expect(response.body).to.have.property("title", "Water");
        expect(response.body).to.have.property("description", "Sparkling with lemon");
        expect(response.body).to.have.property("price", 0.99);
        expect(response.body).to.have.property('id');
    })
});

// update
it('Produktas atnaujinamas kai kreipiamasi į PUT/products/63', () => {
    cy.request('PUT', 'http://localhost:3000/products/63', {
        "title": "Table", 
        "description": "White", 
        "price": 899.99}).then((response) => {
        expect(response.status).to.be.eq(200);
        expect(response.body).to.have.property('message')
        expect(response.body).to.have.property('title', 'Table')
        expect(response.body).to.have.property('description', 'White')
        expect(response.body).to.have.property('price', 899.99);
        expect(response.body).to.have.property('id');
        cy.log(response.body);
    })
});

